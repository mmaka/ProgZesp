<Application x:Class="Rozmieszczenie.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Rozmieszczenie"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <Style TargetType="Button" x:Key="StylButton" >

            <Style.Setters>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="#CC707070" BorderThickness="0">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <RadialGradientBrush 
		                    Center="0.5,1" GradientOrigin="0.5,0.95" RadiusX="0.85" RadiusY="0.23" 
		                    SpreadMethod="Pad" ColorInterpolationMode="SRgbLinearInterpolation" >
                            <GradientStop Color="#00000000" Offset="0.81" />
                            <GradientStop Color="#FFA3A3A3" Offset="0" />
                        </RadialGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#CC707070"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style.Setters>

            <Style.Triggers>

                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Background">
                        <Setter.Value>
                            <RadialGradientBrush 
		                    Center="0.5,1" GradientOrigin="0.5,0.95" RadiusX="0.85" RadiusY="0.8" 
		                    SpreadMethod="Pad" ColorInterpolationMode="SRgbLinearInterpolation" >
                                <GradientStop Color="#00000000" Offset="0.81" />
                                <GradientStop Color="#FFA3A3A3" Offset="0" />
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#CC707070"/>
                </Trigger>


                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Background">
                        <Setter.Value>
                            <RadialGradientBrush 
		                    Center="0.5,0.7" GradientOrigin="0.5,0.95" RadiusX="0.85" RadiusY="0.8" 
		                    SpreadMethod="Pad" ColorInterpolationMode="SRgbLinearInterpolation" >
                                <GradientStop Color="#00000000" Offset="0.81" />
                                <GradientStop Color="#FFA3A3A3" Offset="0" />
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#CC707070"/>
                </Trigger>

                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Background">
                        <Setter.Value>
                            <RadialGradientBrush 
		                    Center="0.5,0.5" GradientOrigin="0.5,0.5" RadiusX="0.5" RadiusY="0.5" 
		                    SpreadMethod="Pad" ColorInterpolationMode="SRgbLinearInterpolation" >
                                <GradientStop Color="#00000000" Offset="0.81" />
                                <GradientStop Color="#FFA3A3A3" Offset="0" />
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#CC707070"/>
                </Trigger>

                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF9B9B9B"/>
                    <Setter Property="Opacity" Value="0.8"/>
                    <Setter Property="Background">
                        <Setter.Value>
                            <RadialGradientBrush 
		                    Center="0.5,1" GradientOrigin="0.5,0.95" RadiusX="0.85" RadiusY="0.8" 
		                    SpreadMethod="Pad" ColorInterpolationMode="SRgbLinearInterpolation" >
                                <GradientStop Color="#00000000" Offset="0.81" />
                                <GradientStop Color="#FFA3A3A3" Offset="0" />
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Opacity" Value="0.3"/>
                    <Setter Property="BorderBrush" Value="#CC707070"/>
                </Trigger>
            </Style.Triggers>

        </Style>


        <Style x:Key="TemplateRectangle" TargetType="{x:Type Rectangle}">
            <Setter Property="Height" Value="auto"/>
            <Setter Property="Width" Value="auto"/>
            <Setter Property="Opacity" Value="0.75"/>
            <Setter Property="Stroke" Value="#FF646464"/>
            <Setter Property="RadiusX" Value="9" />
            <Setter Property="RadiusY" Value="9" />
            <Setter Property="Fill" >
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="#FF3A3939" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StylWindow" TargetType="{x:Type Window}">
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush  Opacity="0" />
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StylTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderBrush" Value="#CC707070" />
            <Setter Property="Background" Value="#19FFFFFF" />
        </Style>

        <!--  BELKA  -->

        <Style x:Key="Belka.Pasek" TargetType="{x:Type Border}">
            <Setter Property="Width" Value="auto"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="#B2000000" />
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="CornerRadius" Value="9,9,0,0"/>
            <Setter Property="Opacity" Value="0.7"/>
            <Setter Property="Panel.ZIndex" Value="1"/>
        </Style>


        <Style x:Key="Belka.ZamknijButton" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Width" Value="10"/>
            <Setter Property="Height" Value="10" />
            <Setter Property="Margin" Value="0,5,9,0"/>
            <Setter Property="Panel.ZIndex" Value="1"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template" >
                <Setter.Value>
                    <ControlTemplate>
                        <Image Source="/Rozmieszczenie;component/Resources/ikona_zamknij.png"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="Belka.MinimalizujButton" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Width" Value="10"/>
            <Setter Property="Height" Value="10" />
            <Setter Property="Margin" Value="0,5,24,0"/>
            <Setter Property="Panel.ZIndex" Value="1"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template" >
                <Setter.Value>
                    <ControlTemplate>
                        <Image Source="/Rozmieszczenie;component/Resources/ikona_minimalizuj.png"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




        



            <!--    STYL MENU -->


        <SolidColorBrush x:Key="HighlightedBackgroundBrush" Color="#B2005EB8" />
        <SolidColorBrush x:Key="MenuBackgroundBrush" Color="#99003466" />
        <SolidColorBrush x:Key="NormalBorderBrush" Color="#00c7c7c7" />
        <SolidColorBrush x:Key="SolidMenuFontBrush" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="HighlightedText" Color="#FFFFFFFF" />

        <Style x:Key="Menu" TargetType="{x:Type Menu}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border>
                            <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="MenuItem" TargetType="{x:Type MenuItem}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Border" BorderThickness="1">
                            <Grid Background="#b2000000 " Opacity="0.9">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition x:Name="Col3" />
                                </Grid.ColumnDefinitions>

                                <!-- ContentPresenter to show an Icon if needed -->
                                <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                                <!-- Glyph is a checkmark if needed for a checkable menu -->
                                <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                </Grid>

                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                x:Name="HeaderHost"
                                RecognizesAccessKey="True"
                                ContentSource="Header"/>

                                <!-- Content for the menu IGT -->
                                <ContentPresenter Grid.Column="2"
                                Margin="8,1,8,1"
                                x:Name="IGTHost"
                                ContentSource="InputGestureText"
                                VerticalAlignment="Center"/>

                                <!-- Arrow drawn path which points to the next level of the menu -->
                                <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                </Grid>

                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Border  x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"
                                             BorderThickness="0" Padding="0">
                                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>

                        <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                        <ControlTemplate.Triggers>
                            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                <Setter Property="MinWidth" Value="2" TargetName="Col0"/>
                                <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                            </Trigger>

                            <!-- Role = SubMenuItem : this is a child menu item which has children-->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                            </Trigger>

                            <!-- If no Icon is present the we collapse the Icon Content -->
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <!-- The GlyphPanel contains the CheckMark -->
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" TargetName="Border">
                                    <Setter.Value>
                                        <RadialGradientBrush 
		                                        Center="0.5,1" GradientOrigin="0.5,0.95" RadiusX="0.85" RadiusY="0.23" 
		                                        SpreadMethod="Pad" ColorInterpolationMode="SRgbLinearInterpolation" >
                                            <GradientStop Color="#CC6C9ADC" Offset="0.81" />
                                            <GradientStop Color="#B2A3A3A3" Offset="0" />
                                        </RadialGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Foreground" Value="{DynamicResource HighlightedText}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" TargetName="Border"/>
                                <Setter Property="BorderThickness" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="false">
                                <Setter Property="Background" Value="#00000000" TargetName="Border">
                                    
                                </Setter>
                                <Setter Property="Foreground" Value="{DynamicResource SolidMenuFontBrush}"/>
                                <Setter Property="BorderBrush" Value="#b2000000 " TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#FF787878"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuContext" TargetType="{x:Type ContextMenu}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border>
                            <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        
        
        <!-- DATAGRID -->

        <Style x:Key="CellStyl" TargetType="DataGridCell">
            <Setter Property="Background" Value="#00000000 "/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#CC00A6F3" />
                    <Setter Property="Opacity" Value="0.9"/>
                    <Setter Property="BorderThickness" Value="0"/>                 
                </Trigger>
            </Style.Triggers>
            
            
        </Style>
            
        
        <Style x:Key="RowStyl" TargetType="DataGridRow">
            <Setter Property="Background" Value="#00000000" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#CC00A6F3" />
                    <Setter Property="Opacity" Value="0.9"/>
                    <Setter Property="BorderThickness" Value="0"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        
        
        <Style x:Key="HeaderStyl" TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="#00000000" />
            <Setter Property="Width" Value="auto" />
            <Style.Triggers>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Background" Value="#CC00A6F3" />                    
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="DataGridKolumna1Styl" TargetType="DataGridRowHeader">
            <Setter Property="Background" Value="#00000000"/>
            <Setter Property="Width" Value="0"/>            
        </Style>



        <Style x:Key="myStyle" TargetType="{x:Type ScrollViewer}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                            <ScrollBar 
                        Name="PART_VerticalScrollBar"
                        Opacity="0.5" 
                        Grid.Column="1"
                        Value="{TemplateBinding VerticalOffset}"
                        Maximum="{TemplateBinding ScrollableHeight}"
                        ViewportSize="{TemplateBinding ViewportHeight}"
                        Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Background="#99707070" BorderBrush="#FF00003C"
                                />
                            <ScrollBar 
                        Name="PART_HorizontalScrollBar"
                        Orientation="Horizontal"
                        Opacity="0.75"
                        Grid.Row="1"
                        Value="{TemplateBinding HorizontalOffset}"
                        Maximum="{TemplateBinding ScrollableWidth}"
                        ViewportSize="{TemplateBinding ViewportWidth}"
                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>






    </Application.Resources>
</Application>
